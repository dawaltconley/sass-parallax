@use "sass:math";

$IE: false !default;
$css-properties: false !default;
$perspective: 2000px !default;
@if math.is-unitless($perspective) {
    @error '$perspective cannot be unitless: #{$perspective}';
}

// checks to rule out browsers that won't support css parallax effect
// TODO: -webkit-overflow-scrolling was a hack to target iOS Safari, but dropped after v13

@mixin support {
    @supports (((-webkit-perspective: 1px) or (perspective: 1px)) and (not (-webkit-overflow-scrolling: touch))) {
        @content;
    }
}

// settings for the document body of a parallax page
// applies hw acceleration

@mixin body {
    @include support {
        transform: translateZ(0);
    }

    &::before { // fixes rendering issues on Edge
        content: "";
        position: fixed;
        top: 0;
        width: 1px;
        height: 1px;
        z-index: 1;
    }
}

// settings for the scrollable element of the parallax page
// can be document body, but putting the two together
// caused issues in some browsers

@mixin page($perspective: $perspective, $css-properties: $css-properties) {
    @if math.is-unitless($perspective) {
        @error '$perspective cannot be unitless: #{$perspective}';
    }

    position: relative;
    overflow-y: auto;
    overflow-x: hidden;

    @include support {
        height: 100vh;
        perspective-origin: left;
        @if $css-properties {
            --parallax-perspective: #{$perspective};
            perspective: var(--parallax-perspective);
        } @else {
            perspective: $perspective;
        }

        > * { // originally outside parallax.support, test if needed
            transform: translateZ(0);
        }
    }
}

// settings for a group of parallax elements positione in 3d space
// within the scrollable page.

@mixin group($IE: $IE) {
    position: relative;
    pointer-events: none;
    background-color: transparent !important;

    & > * {
        position: if($IE, relative, null); // fixes a stacking issue in IE. must be overridden by mixin.
        pointer-events: auto;
    }

    @include support {
        transform-style: preserve-3d;
    }
}

// settings for a layer of a parallax-group div
// $scale calculates scale to preserve original size when translated backwards
// $height-adjust calculates minimum height adjusment necessary
// for the layer to always fill the width of its parent parallax-group

$_parent-perspective: $perspective;

@mixin bg($depth: 0, $perspective: $perspective, $css-properties: $css-properties) {
    @if math.is-unitless($perspective) {
        @error '$perspective cannot be unitless: #{$perspective}';
    } @else if not math.compatible($depth, $perspective) {
        @error '$depth must use the same units as $perspective';
    } @else if math.is-unitless($depth) and $depth >= 1 {
        @error 'relative $depth must be less than 1';
    } @else if not math.is-unitless($depth) {
        @if $depth >= $perspective {
            @error 'absolute $depth must be less than $perspective';
        }
        $depth: math.div($depth, $perspective);
    }

    position: absolute !important;
    top: 0; bottom: 0; left: 0; right: 0;

    @include support {
        transform-origin: left;

        @if $css-properties {
            @if $perspective != $_parent-perspective {
                --parallax-perspective: #{$perspective};
            }
            --parallax-depth: #{$depth}; // must be unitless, relative to --parallax-perspective
            --parallax-scale: #{calc(1 + max(var(--parallax-depth), calc(var(--parallax-depth) * -1)))};
            --parallax-height-adjust: #{calc((1 - (1 / var(--parallax-scale))) * (50% - 50vh))};
            top: var(--parallax-height-adjust); bottom: var(--parallax-height-adjust);
            transform: translateZ(calc(var(--parallax-depth) * var(--parallax-perspective))) scale(var(--parallax-scale));
        } @else {
            $scale: 1 + math.abs($depth);
            $height-adjust: calc(#{ 1 - math.div(1, $scale) } * (50% - 50vh));
            top: $height-adjust; bottom: $height-adjust;
            transform: translateZ(#{ $depth * $perspective }) scale($scale);
        }
    }
}
